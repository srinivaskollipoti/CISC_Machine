import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author cozyu
 * @author youcao  documented by youcao.
 */
public class CISCGUI extends javax.swing.JFrame {

	private final static Logger LOG = Logger.getGlobal();
	private Thread runThread;
	private CISCSimulator simu; 
    private CPU cpu;
    /**
     * Creates new form CISCGUI
     */
    public CISCGUI() {
        initComponents();
        simu=new CISCSimulator(this);
        cpu=simu.getCPU();
        this.setTitle("CISC Simulator");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser1 = new javax.swing.JColorChooser();
        labelInstruction = new javax.swing.JLabel();
        buttonRun = new javax.swing.JButton();
        buttonIPL = new javax.swing.JButton();
        buttonSingleStep = new javax.swing.JButton();
        labelLogger = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        labelR0 = new javax.swing.JLabel();
        labelR1 = new javax.swing.JLabel();
        labelR2 = new javax.swing.JLabel();
        labelR3 = new javax.swing.JLabel();
        textFieldR0 = new javax.swing.JTextField();
        textFieldR1 = new javax.swing.JTextField();
        textFieldR2 = new javax.swing.JTextField();
        textFieldR3 = new javax.swing.JTextField();
        buttonSave = new javax.swing.JButton();
        labelIX1 = new javax.swing.JLabel();
        labelIX2 = new javax.swing.JLabel();
        labelIX3 = new javax.swing.JLabel();
        textFieldIX1 = new javax.swing.JTextField();
        textFieldIX2 = new javax.swing.JTextField();
        textFieldIX3 = new javax.swing.JTextField();
        labelIR = new javax.swing.JLabel();
        textFieldIR = new javax.swing.JTextField();
        labelPC = new javax.swing.JLabel();
        textFieldPC = new javax.swing.JTextField();
        labelMAR = new javax.swing.JLabel();
        labelMBR = new javax.swing.JLabel();
        textFieldMAR = new javax.swing.JTextField();
        textFieldMFR = new javax.swing.JTextField();
        labelCC = new javax.swing.JLabel();
        textFieldCC = new javax.swing.JTextField();
        labelMFR = new javax.swing.JLabel();
        textFieldMBR = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textFieldInstruction = new javax.swing.JTextPane();
        buttonHalt = new javax.swing.JButton();
        buttonLoadProgram1 = new javax.swing.JButton();
        buttonLoadProgram2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaSystemIN = new javax.swing.JTextArea();
        labelSystemIN = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textareaSystemOUT = new javax.swing.JTextArea();
        labelSystemOUT = new javax.swing.JLabel();
        

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelInstruction.setText("Instruction");

        buttonRun.setText("Run");
        buttonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunActionPerformed(evt);
            }
        });

        buttonIPL.setText("IPL");
        buttonIPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonIPLActionPerformed(evt);
            }
        });

        buttonSingleStep.setText("SingleStep");
        buttonSingleStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSingleStepActionPerformed(evt);
            }
        });

        labelLogger.setText("Logger");

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setLineWrap(true);
        jScrollPane1.setViewportView(textArea);

        labelR0.setText("R0");

        labelR1.setText("R1");

        labelR2.setText("R2");

        labelR3.setText("R3");

        buttonSave.setText("Load");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        labelIX1.setText("IX1");

        labelIX2.setText("IX2");

        labelIX3.setText("IX3");

        labelIR.setText("IR");

        labelPC.setText("PC");

        labelMAR.setText("MAR");

        labelMBR.setText("MBR");

        labelCC.setText("CC");

        labelMFR.setText("MFR");

        jScrollPane2.setViewportView(textFieldInstruction);
        
        buttonHalt.setText("Halt");
        buttonHalt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHaltActionPerformed(evt);
            }
        });

        buttonLoadProgram1.setText("Load Program 1");
        buttonLoadProgram1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadProgram1ActionPerformed(evt);
            }
        });

        buttonLoadProgram2.setText("Enter User Data");
        buttonLoadProgram2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadProgram2ActionPerformed(evt);
            }
        });
        buttonLoadProgram2.setEnabled(false);
        textAreaSystemIN.setEnabled(false);


        textAreaSystemIN.setColumns(20);
        textAreaSystemIN.setRows(5);
        textAreaSystemIN.setLineWrap(true);
        jScrollPane3.setViewportView(textAreaSystemIN);
        textAreaSystemIN.addKeyListener(new KeyListener(){
            
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void keyReleased(KeyEvent e) {
				String text = textAreaSystemIN.getText();
	            if(text.endsWith("\n")==true)
	            {
	            	inputUserData();
	            }
			}
            });
    	

        labelSystemIN.setText("SystemIN");

        textareaSystemOUT.setColumns(20);
        textareaSystemOUT.setRows(5);
        textareaSystemOUT.setLineWrap(true);
        jScrollPane4.setViewportView(textareaSystemOUT);

        labelSystemOUT.setText("SystemOUT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(labelInstruction))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(labelSystemIN)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buttonSingleStep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonHalt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonIPL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buttonLoadProgram1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(buttonLoadProgram2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelMFR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textFieldMFR))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelMAR, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textFieldMAR, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(labelPC)
                                    .addGap(18, 18, 18)
                                    .addComponent(textFieldPC, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelR0)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(labelR3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelR1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelR2, javax.swing.GroupLayout.Alignment.LEADING)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(textFieldR0)
                                        .addComponent(textFieldR1)
                                        .addComponent(textFieldR2)
                                        .addComponent(textFieldR3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldIX2)
                                    .addComponent(textFieldIX3)
                                    .addComponent(textFieldIR)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(labelMBR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelIR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelCC, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textFieldMBR)
                                    .addComponent(textFieldCC, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(labelIX1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelIX2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelIX3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textFieldIX1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(buttonSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(158, 158, 158)
                                .addComponent(labelLogger, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labelSystemOUT)
                .addGap(129, 129, 129))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(labelInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonSingleStep, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonIPL, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonHalt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelSystemOUT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(buttonLoadProgram1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buttonLoadProgram2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelSystemIN)
                        .addGap(86, 86, 86)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelR0)
                            .addComponent(textFieldR0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelIX1)
                            .addComponent(textFieldIX1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelR1)
                            .addComponent(textFieldR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelIX2)
                            .addComponent(textFieldIX2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelR2)
                            .addComponent(textFieldR2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelIX3)
                            .addComponent(textFieldIX3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelR3)
                            .addComponent(textFieldR3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldIR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelIR))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPC)
                            .addComponent(textFieldPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelCC)
                            .addComponent(textFieldCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMAR)
                            .addComponent(textFieldMAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldMBR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelMBR))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldMFR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelMFR)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelLogger, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /**
	 * Load instruction from user interface.
	 * @return A boolean indicating if the loading succeed. 
	 */
    private boolean loadUserInstruction()
    {
    	String instructions=textFieldInstruction.getText();
    	instructions=instructions.trim();
    	if(instructions.length()>0)
    	{
	    	String [] arrInst=instructions.split("\n");
	    	if(simu.setUserCode(arrInst)==false)
	    	{
	    		printLog("[WARNING] Input instruction is not valid\n");
	    		printLog(simu.getMessage());
	    		return false;
	    	}	
	    	printLog(simu.getMessage());
	    	textFieldInstruction.setText("");
    	}
    	return true;
    }


    /**
	 * Perform singlestep process.
	 */
    private void buttonSingleStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSingleStepActionPerformed
    	//printLog("[NOTICE] Simulator perform singlestep\n");
    	if(simu.isPowerOff()==true) {
    		printLog("[NOTICE] Simulator is not turned on, push the IPL button\n");
    		return;
    	}
    	if(loadUserInstruction()==false)
    		return;
    	simu.singleStep();
    }//GEN-LAST:event_buttonSingleStepActionPerformed

    /**
	 * Perform halt process.
	 */
    private void haltProcess()
    {
		simu.setStop();
		try {
			runThread.join();
			printLog("[NOTICE] Simulator halted\n");
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return;
    }
    /**
	 * Perform run process.
	 */
    private void buttonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunActionPerformed
    	if(simu.isPowerOff()==true) {
    		printLog("[NOTICE] Simulator is not turned on, push the IPL button\n");
    		return;
    	}
    	if(simu.isRun()==true)
    	{
    		haltProcess();
    		return;
    	}
    	
    	printLog("[NOTICE] Simulator starts to run\n");
    	
    	if(loadUserInstruction()==false)
    		return;
    	
    	runThread= new Thread(simu,"Run");
    	runThread.start();
    	//simu.run();
    }//GEN-LAST:event_buttonRunActionPerformed

    public void printLog(String log)
    {
    	printLog(log,false);    	
    }
    
    /**
     * Print log into logger screen
     * @param log
     * @param isOnlyDisplay
     */
    public void printLog(String log,boolean isOnlyDisplay)
    {
    	String message=log;
    	textArea.append(message);
        textArea.setCaretPosition(textArea.getDocument().getLength() - 1);

    	if(isOnlyDisplay==false)
    		LOG.info(message);
    }

    /**
	 * Perform IPL process. if the simulator has turned on, the simulator will be turned off, otherwise it will be turned on.
	 */
    private void buttonIPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonIPLActionPerformed
    	if(simu.isPowerOff()==true)
    	{
    		printLog("[NOTICE] Simulator is turned on\n");
    		simu.initProcessor();
	    	printLog(simu.getMessage());
    	}else {
    		simu.powerOff();
    		textareaSystemOUT.setText("");
    		textAreaSystemIN.setText("");
    		textArea.setText("");
    		buttonLoadProgram1.setEnabled(true);
    		printLog("[NOTICE] Simulator is turned off\n");
            
    	}
    }//GEN-LAST:event_buttonIPLActionPerformed

    /**
	 * Load registers' value from the UI and save into the simulator.  
	 */
    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
    	
    	if(simu.isPowerOff()==true) {
    		printLog("[NOTICE] Simulator is not turned on, push the IPL button\n");
    		return;
    	}
    	
    	printLog("[NOTICE] Request to load user input\n");
    	String message="";
    	boolean result=true;
    	try {
    		result=simu.loadRegister(
    			Long.valueOf(textFieldR0.getText().trim()),
    			Long.valueOf(textFieldR1.getText().trim()),
    			Long.valueOf(textFieldR2.getText().trim()),
    			Long.valueOf(textFieldR3.getText().trim()),
    			Long.valueOf(textFieldIX1.getText().trim()),
    			Long.valueOf(textFieldIX2.getText().trim()),
    			Long.valueOf(textFieldIX3.getText().trim()),
    			Long.valueOf(textFieldIR.getText().trim()),
    			Long.valueOf(textFieldPC.getText().trim()),
    			Long.valueOf(textFieldCC.getText().trim()),
    			Long.valueOf(textFieldMAR.getText().trim()),
    			Long.valueOf(textFieldMBR.getText().trim()),
    			Long.valueOf(textFieldMFR.getText().trim()));
    	}catch(NumberFormatException e)
    	{
    		message="[WARNING] Input text is not number\n";
    		printLog(message);
    		updateDisplay(false);
    		return;
    	}
    	updateDisplay();
    }//GEN-LAST:event_buttonSaveActionPerformed

    /**
     * Halt process
     * @param evt
     */
    private void buttonHaltActionPerformed(java.awt.event.ActionEvent evt) {                                           
        haltProcess();
    }                                          

    /**
     * Load Test Program 1
     * @param evt
     */
    private void buttonLoadProgram1ActionPerformed(java.awt.event.ActionEvent evt) {                                                   
    	if(simu.isPowerOff()==true) {
    		printLog("[NOTICE] Simulator is not turned on, push the IPL button\n");
    		return;
    	}
    	simu.loadTestProgram1();
    	
    	Random rand = new Random();
    	StringBuffer buffer=new StringBuffer();
    	for (int i=0;i<20;i++)
    	{
    		int n = rand.nextInt(32767);
    		buffer.append(Integer.toString(n));
    		if(i==19)
    			break;
    		buffer.append(",");	
    	}
    	textAreaSystemIN.setText(buffer.toString());
    	textareaSystemOUT.setText("Push run button\n");
    	buttonLoadProgram2.setEnabled(false);
    }  

    /**
     * Get user input data
     * @param evt
     */    
    private void buttonLoadProgram2ActionPerformed(java.awt.event.ActionEvent evt) {                                                   
    	if(simu.isPowerOff()==true) {
    		printLog("[NOTICE] Simulator is not turned on, push the IPL button\n");
    		return;
    	}
    	inputUserData();
    } 

    /**
     * Get user input data, it control the flow according to the phase of program 
     */    
    public boolean inputUserData()
    {	
    	int inputSize=0;
    	int phase = simu.getPhase();
    	
		if (phase == 1)
			inputSize = 20;
		else if (phase== 2)
			inputSize = 1;
		else 
    	{
    		textareaSystemOUT.setText("Run test program 1 first\n");
    		return false;
    	}


		// remove space character
    	String text = textAreaSystemIN.getText().trim();
    	String [] arrNumber= text.split(",");
    	List<String> finalNumber=new ArrayList<String>();

    	// check number format
    	for(int i =0;i<arrNumber.length;i++) {
    		try {
    			if(arrNumber[i].isBlank()!=true)
    			{
    				arrNumber[i]=Integer.toString(Integer.valueOf(arrNumber[i].trim()));
    				finalNumber.add(arrNumber[i].trim());
    			}
    		}
    		catch (NumberFormatException e)
    		{
    			textareaSystemOUT.setText(arrNumber[i]+" is not number\n");
    			return false;
    		}
    	}

    	// check number of integer
		if (finalNumber.size() != inputSize) {
			textareaSystemOUT.setText("Please enter "+inputSize+" numbers.\nYou entered " + finalNumber.size() + " numbers.");
			return false;
		}
		
		// check range of integer
		for (String word : finalNumber) {
			int number = Integer.valueOf(word);
			if (number > 32767) {
				textareaSystemOUT.setText("Sorry, number over 32767 are not supported.\nYour entered "+word+".\n");
				return false;
			}
			if (number < 0) {
				textareaSystemOUT.setText("Sorry, number under 0 are not supported.\nYour entered "+word+".\n");
				return false;
			}
		}

    	text=String.join(",",finalNumber)+'\0';
        printLog("[INFO] User entered a text : ["+text+"]\n");
        simu.inputUserText(text);
        textAreaSystemIN.setText("");
        textareaSystemOUT.setText("");
        return true;
    }
    
    /**
	 * Update display of UI  
	 */
    public void updateDisplay()
    {
    	updateDisplay(true);
    }
    
    public void updateDisplay(boolean isMessage)
    {
    	textFieldR0.setText(Long.toString(cpu.getGPR(0).getLong()));
    	textFieldR1.setText(Long.toString(cpu.getGPR(1).getLong()));
    	textFieldR2.setText(Long.toString(cpu.getGPR(2).getLong()));
    	textFieldR3.setText(Long.toString(cpu.getGPR(3).getLong()));
    	textFieldIX1.setText(Long.toString(cpu.getIX(1).getLong()));
    	textFieldIX2.setText(Long.toString(cpu.getIX(2).getLong()));
    	textFieldIX3.setText(Long.toString(cpu.getIX(3).getLong()));
    	textFieldPC.setText(Long.toString(cpu.getPC().getLong()));
    	textFieldCC.setText(Long.toString(cpu.getCC().getLong()));
    	textFieldMAR.setText(Long.toString(cpu.getMAR().getLong()));
    	textFieldMBR.setText(Long.toString(cpu.getMBR().getLong()));
    	textFieldMFR.setText(Long.toString(cpu.getMFR().getLong()));
    	textFieldIR.setText(Long.toString(cpu.getIR().getLong()));
    	textFieldPC.setText(Long.toString(cpu.getPC().getLong()));
    	if(isMessage==true)
    		printLog(simu.getMessage());

    }
    
    public void setEnableIn(boolean isEnable)
    {
    	textAreaSystemIN.setEnabled(isEnable);
    	buttonLoadProgram2.setEnabled(isEnable);
    	if(isEnable)
    	{
    		textAreaSystemIN.requestFocus();
    	}
    	
    }
    
    /**
     * print message into printer console
     * @param text
     */
    public void printScreen(String text)
    {
    	textareaSystemOUT.append(text);
    }
    
    /**
     * main function
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CISCGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CISCGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CISCGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CISCGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
                
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CISCGUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonHalt;
    private javax.swing.JButton buttonLoadProgram1;
    private javax.swing.JButton buttonLoadProgram2;
    private javax.swing.JButton buttonIPL;
    private javax.swing.JButton buttonRun;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonSingleStep;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelCC;
    private javax.swing.JLabel labelIR;
    private javax.swing.JLabel labelIX1;
    private javax.swing.JLabel labelIX2;
    private javax.swing.JLabel labelIX3;
    private javax.swing.JLabel labelInstruction;
    private javax.swing.JLabel labelLogger;
    private javax.swing.JLabel labelMAR;
    private javax.swing.JLabel labelMBR;
    private javax.swing.JLabel labelMFR;
    private javax.swing.JLabel labelPC;
    private javax.swing.JLabel labelR0;
    private javax.swing.JLabel labelR1;
    private javax.swing.JLabel labelR2;
    private javax.swing.JLabel labelR3;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textFieldCC;
    private javax.swing.JTextField textFieldIR;
    private javax.swing.JTextField textFieldIX1;
    private javax.swing.JTextField textFieldIX2;
    private javax.swing.JTextField textFieldIX3;
    private javax.swing.JTextPane textFieldInstruction;
    private javax.swing.JTextField textFieldMAR;
    private javax.swing.JTextField textFieldMBR;
    private javax.swing.JTextField textFieldMFR;
    private javax.swing.JTextField textFieldPC;
    private javax.swing.JTextField textFieldR0;
    private javax.swing.JTextField textFieldR1;
    private javax.swing.JTextField textFieldR2;
    private javax.swing.JTextField textFieldR3;
    private javax.swing.JTextArea textareaSystemOUT;
    private javax.swing.JTextArea textAreaSystemIN;
    private javax.swing.JLabel labelSystemIN;
    private javax.swing.JLabel labelSystemOUT;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
